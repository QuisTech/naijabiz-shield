PROJECT CODE ANALYSIS - Sat Oct 25 19:10:24 WCAST 2025
================================

// ==== backend/app/api/__init__.py ====
# API routes


// ==== backend/app/api/reports.py ====
from fastapi import APIRouter

router = APIRouter()

@router.get("/stats")
async def get_assessment_stats():
    """Get overall assessment statistics"""
    # This would typically query the database
    return {
        "success": True,
        "data": {
            "total_assessments": 150,
            "average_risk_score": 42.5,
            "risk_distribution": {
                "low": 35,
                "medium": 45,
                "high": 15,
                "critical": 5
            }
        }
    }


// ==== backend/app/api/security_assessment.py ====
import os
from sqlalchemy import select
from fastapi import APIRouter, HTTPException, Depends, BackgroundTasks
from fastapi.responses import FileResponse
import json
from typing import Dict, Any
import uuid
import os
from pathlib import Path

from app.services.assessment_service import SecurityAssessmentService
from app.services.pdf_service import PDFReportService
from app.models.assessment import SecurityAssessment
from app.core.database import get_db
from sqlalchemy.ext.asyncio import AsyncSession

router = APIRouter()
assessment_service = SecurityAssessmentService()
pdf_service = PDFReportService()

@router.get("/questions")
async def get_assessment_questions():
    """Get all security assessment questions"""
    try:
        questions = assessment_service.get_assessment_questions()
        return {
            "success": True,
            "data": questions,
            "message": "Assessment questions loaded successfully"
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error loading questions: {str(e)}")

@router.get("/threats")
async def get_current_threats():
    """Get current security threats for Nigerian businesses"""
    try:
        threats = assessment_service.get_current_threats()
        return {
            "success": True,
            "data": threats,
            "message": "Current threats loaded successfully"
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error loading threats: {str(e)}")

@router.post("/assess")
async def submit_assessment(assessment_data: Dict[str, Any], db: AsyncSession = Depends(get_db)):
    """Submit security assessment and get results"""
    try:
        # Calculate risk score
        risk_result = await assessment_service.calculate_risk_score(assessment_data.get('answers', {}))
        
        # Generate recommendations
        recommendations = await assessment_service.generate_recommendations(
            assessment_data.get('answers', {}),
            risk_result['risk_level']
        )
        
        # Save to database (with email)
        db_assessment = SecurityAssessment(
            business_name=assessment_data.get('business_name'),
            business_email=assessment_data.get('business_email'),  # NEW: Save email
            business_type=assessment_data.get('answers', {}).get('business_type'),
            employee_count=assessment_data.get('answers', {}).get('employee_count'),
            risk_score=risk_result['risk_score'],
            risk_level=risk_result['risk_level'],
            assessment_data=assessment_data.get('answers', {}),
            recommendations=recommendations
        )
        
        db.add(db_assessment)
        await db.commit()
        await db.refresh(db_assessment)
        
        return {
            "success": True,
            "data": {
                "assessment_id": db_assessment.id,
                "risk_assessment": risk_result,
                "recommendations": recommendations,
                "threat_alerts": assessment_service.get_current_threats()
            },
            "message": "Assessment completed successfully"
        }
        
    except Exception as e:
        await db.rollback()
        raise HTTPException(status_code=500, detail=f"Error processing assessment: {str(e)}")

@router.get("/report/{assessment_id}")
async def generate_pdf_report(assessment_id: int, db: AsyncSession = Depends(get_db)):
    """Generate PDF report for an assessment"""
    try:
        # Get assessment from database using ORM
        from app.models.assessment import SecurityAssessment
        result = await db.execute(
            select(SecurityAssessment).where(SecurityAssessment.id == assessment_id)
        )
        assessment = result.scalar_one_or_none()
        
        if not assessment:
            raise HTTPException(status_code=404, detail="Assessment not found")
        
        # Create reports directory if it doesn't exist
        reports_dir = Path("reports")
        reports_dir.mkdir(exist_ok=True)
        
        # Generate PDF
        output_path = reports_dir / f"security_report_{assessment_id}.pdf"
        
        assessment_data = {
            'business_name': assessment.business_name,
            'business_type': assessment.business_type,
            'employee_count': assessment.employee_count,
            'risk_score': assessment.risk_score,
            'risk_level': assessment.risk_level,
            'total_questions_answered': len(assessment.assessment_data) if assessment.assessment_data else 0
        }
        
        # Generate the PDF
        final_path = pdf_service.create_security_report(
            assessment_data,
            assessment.recommendations or [],
            str(output_path)
        )
        
        # Check if we got a PDF or fallback text file
        if final_path.endswith('.pdf'):
            return FileResponse(
                path=final_path,
                filename=f"NaijaBiz_Security_Report_{assessment_id}.pdf",
                media_type='application/pdf'
            )
        else:
            # Return text file if PDF failed
            return FileResponse(
                path=final_path,
                filename=f"NaijaBiz_Security_Report_{assessment_id}.txt",
                media_type='text/plain'
            )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error generating report: {str(e)}")

@router.get("/assessments")
async def get_recent_assessments(db: AsyncSession = Depends(get_db)):
    """Get recent security assessments"""
    try:
        from sqlalchemy import text
        result = await db.execute(
            text("SELECT id, business_name, risk_level, risk_score, created_at FROM security_assessments ORDER BY created_at DESC LIMIT 10")
        )
        assessments = result.fetchall()
        
        return {
            "success": True,
            "data": [
                {
                    "id": a.id,
                    "business_name": a.business_name,
                    "risk_level": a.risk_level,
                    "risk_score": a.risk_score,
                    "created_at": a.created_at.isoformat() if a.created_at else None
                }
                for a in assessments
            ],
            "message": "Recent assessments loaded successfully"
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error loading assessments: {str(e)}")


// ==== backend/app/core/__init__.py ====
# Core modules


// ==== backend/app/core/config.py ====
from pydantic_settings import BaseSettings
from typing import Optional
import os

class Settings(BaseSettings):
    PROJECT_NAME: str = "NaijaBiz Shield"
    VERSION: str = "1.0.0"
    API_V1_STR: str = "/api/v1"
    
    # Database
    DATABASE_URL: str = "postgresql+asyncpg://user:password@localhost:5432/naijabiz_shield"
    
    # OpenAI
    OPENAI_API_KEY: Optional[str] = None
    
    # Security
    SECRET_KEY: str = "your-secret-key-change-in-production"
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30
    
    class Config:
        env_file = ".env"
        case_sensitive = True

settings = Settings()


// ==== backend/app/core/database.py ====
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import declarative_base, sessionmaker
from app.core.config import settings

# Use SQLite for development - no external database needed
engine = create_async_engine(
    "sqlite+aiosqlite:///./naijabiz_dev.db", 
    connect_args={"check_same_thread": False},
    echo=True  # Show SQL queries in console
)

AsyncSessionLocal = sessionmaker(
    engine, class_=AsyncSession, expire_on_commit=False
)

Base = declarative_base()

async def get_db():
    async with AsyncSessionLocal() as session:
        try:
            yield session
        finally:
            await session.close()


// ==== backend/app/core/security.py ====



// ==== backend/app/models/__init__.py ====
# Database models


// ==== backend/app/models/assessment.py ====
from sqlalchemy import Column, Integer, String, DateTime, JSON, Text, Float
from sqlalchemy.sql import func
from app.core.database import Base

class SecurityAssessment(Base):
    __tablename__ = "security_assessments"
    
    id = Column(Integer, primary_key=True, index=True)
    business_name = Column(String(255), nullable=True)
    business_email = Column(String(255), nullable=True)
    business_type = Column(String(100), nullable=True)
    employee_count = Column(String(50), nullable=True)
    risk_score = Column(Float, default=0.0)
    risk_level = Column(String(50), default="low")  # low, medium, high, critical
    assessment_data = Column(JSON)  # Store all question answers
    recommendations = Column(JSON)  # Store generated recommendations
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())

class ThreatAlert(Base):
    __tablename__ = "threat_alerts"
    
    id = Column(Integer, primary_key=True, index=True)
    title = Column(String(255), nullable=False)
    description = Column(Text, nullable=False)
    severity = Column(String(50), default="medium")  # low, medium, high, critical
    category = Column(String(100), nullable=False)  # phishing, malware, fraud, etc.
    region = Column(String(100), default="nigeria")
    is_active = Column(Integer, default=1)
    created_at = Column(DateTime(timezone=True), server_default=func.now())


// ==== backend/app/services/__init__.py ====



// ==== backend/app/services/assessment_service.py ====
import json
import os
from typing import Dict, List, Any
from pathlib import Path

class SecurityAssessmentService:
    def __init__(self):
        self.questions_data = self.load_questions()
        self.threat_alerts = self.load_threat_alerts()

    def load_questions(self) -> Dict:
        """Load assessment questions from JSON file"""
        questions_path = Path(__file__).parent.parent / "data" / "assessment_questions.json"
        with open(questions_path, 'r', encoding='utf-8') as f:
            return json.load(f)

    def load_threat_alerts(self) -> List[Dict]:
        """Load current threat alerts for Nigeria"""
        return [
            {
                "id": 1,
                "title": "WhatsApp Business Account Hijacking",
                "description": "Scammers are targeting small business WhatsApp accounts to impersonate business owners and request payments from customers.",
                "severity": "high",
                "category": "social_engineering",
                "recommendation": "Enable two-step verification on WhatsApp and educate customers about verified business accounts."
            },
            {
                "id": 2,
                "title": "Fake Bank Alert Scams",
                "description": "Fraudsters are sending fake bank transfer alerts to businesses, especially for high-value transactions.",
                "severity": "critical",
                "category": "fraud",
                "recommendation": "Always verify transactions through your bank's official app or by calling your bank directly."
            }
        ]

    async def calculate_risk_score(self, answers: Dict[str, Any]) -> Dict[str, Any]:
        """Calculate risk score based on assessment answers"""
        total_score = 0.0
        max_possible_score = 0.0
        
        # Calculate scores for each question
        for section in self.questions_data["sections"]:
            for question in section["questions"]:
                qid = question["id"]
                max_possible_score += question["risk_weight"]
                
                if qid in answers:
                    answer = answers[qid]
                    
                    # Online Payments - Higher risk if accepting payments
                    if qid == "online_payments":
                        if answer == "yes":
                            total_score += question["risk_weight"] * 0.8
                        elif answer == "sometimes":
                            total_score += question["risk_weight"] * 0.4
                    
                    # Two-Factor Authentication - Higher risk if not using
                    elif qid == "two_factor":
                        if answer == "no":
                            total_score += question["risk_weight"]
                        elif answer == "some_accounts":
                            total_score += question["risk_weight"] * 0.5
                    
                    # Website Presence - Having a website increases exposure
                    elif qid == "has_website":
                        if answer == "yes":
                            total_score += question["risk_weight"] * 0.6
                    
                    # Social Media Usage - Increases brand impersonation risk
                    elif qid == "social_media":
                        if answer == "yes_regularly":
                            total_score += question["risk_weight"] * 0.7
                        elif answer == "yes_occasionally":
                            total_score += question["risk_weight"] * 0.4
                    
                    # Employee Training - No training = higher human risk
                    elif qid == "employee_training":
                        if answer == "no":
                            total_score += question["risk_weight"]
                        elif answer == "some_trained":
                            total_score += question["risk_weight"] * 0.5
                    
                    # Software Updates - Outdated software = vulnerabilities
                    elif qid == "software_updates":
                        if answer == "rarely":
                            total_score += question["risk_weight"]
                        elif answer == "when_reminded":
                            total_score += question["risk_weight"] * 0.6
                    
                    # Annual Revenue - Higher revenue = bigger target
                    elif qid == "annual_revenue":
                        if answer in ["10m+", "5m-10m"]:
                            total_score += question["risk_weight"]
                        elif answer == "1m-5m":
                            total_score += question["risk_weight"] * 0.7
                        elif answer == "500k-1m":
                            total_score += question["risk_weight"] * 0.4
                    
                    # Existing logic for radio and select questions
                    elif question["type"] == "radio":
                        if answer == "yes":
                            total_score += question["risk_weight"]
                    elif question["type"] == "select":
                        # Higher risk for larger businesses
                        if qid == "employee_count":
                            if answer == "50+":
                                total_score += question["risk_weight"]
                            elif answer == "21-50":
                                total_score += question["risk_weight"] * 0.75
                            elif answer == "6-20":
                                total_score += question["risk_weight"] * 0.5
        
        # Calculate percentage and determine risk level
        risk_percentage = (total_score / max_possible_score) * 100 if max_possible_score > 0 else 0
        
        if risk_percentage < 25:
            risk_level = "low"
        elif risk_percentage < 50:
            risk_level = "medium"
        elif risk_percentage < 75:
            risk_level = "high"
        else:
            risk_level = "critical"

        return {
            "risk_score": risk_percentage,
            "risk_level": risk_level,
            "total_questions_answered": len(answers)
        }

    async def generate_recommendations(self, answers: Dict[str, Any], risk_level: str) -> List[Dict]:
        """Generate personalized security recommendations"""
        recommendations = []
        
        # Online Payments
        if answers.get("online_payments") in ["yes", "sometimes"]:
            recommendations.append({
                "priority": "high",
                "title": "Payment Security Verification",
                "description": "Implement multi-channel verification for all online transactions to prevent fraud.",
                "category": "financial"
            })
        
        # Two-Factor Authentication
        if answers.get("two_factor") in ["no", "some_accounts"]:
            recommendations.append({
                "priority": "high",
                "title": "Enable Two-Factor Authentication",
                "description": "Protect all business accounts (email, banking, social media) with 2FA.",
                "category": "authentication"
            })
        
        # Website Security
        if answers.get("has_website") == "yes":
            recommendations.append({
                "priority": "medium",
                "title": "Website Security Audit",
                "description": "Regularly check your website for vulnerabilities and keep all plugins updated.",
                "category": "web_security"
            })
        
        # Social Media
        if answers.get("social_media") in ["yes_regularly", "yes_occasionally"]:
            recommendations.append({
                "priority": "medium",
                "title": "Social Media Monitoring",
                "description": "Monitor for fake accounts impersonating your business and educate customers.",
                "category": "brand_protection"
            })
        
        # Employee Training
        if answers.get("employee_training") in ["no", "some_trained"]:
            recommendations.append({
                "priority": "medium",
                "title": "Cybersecurity Training Program",
                "description": "Implement regular security awareness training for all employees.",
                "category": "education"
            })
        
        # Software Updates
        if answers.get("software_updates") in ["rarely", "when_reminded"]:
            recommendations.append({
                "priority": "high",
                "title": "Automated Software Updates",
                "description": "Enable automatic updates for all business software and operating systems.",
                "category": "system_maintenance"
            })
        
        # High Revenue - Additional security measures
        if answers.get("annual_revenue") in ["10m+", "5m-10m"]:
            recommendations.append({
                "priority": "medium",
                "title": "Enhanced Security Monitoring",
                "description": "Consider professional security monitoring services for your business scale.",
                "category": "advanced_security"
            })
        
        # Existing context-specific recommendations
        if answers.get("employee_count") in ["6-20", "21-50", "50+"]:
            recommendations.append({
                "priority": "medium",
                "title": "Employee Security Training",
                "description": "Conduct basic cybersecurity awareness training for all employees.",
                "category": "education"
            })
        
        # Base recommendations for all businesses
        base_recommendations = [
            {
                "priority": "high",
                "title": "Enable Two-Factor Authentication",
                "description": "Add an extra layer of security to your email and social media accounts.",
                "category": "authentication"
            },
            {
                "priority": "medium",
                "title": "Regular Data Backups",
                "description": "Backup important business data weekly to an external drive or cloud storage.",
                "category": "data_protection"
            }
        ]
        
        # Add base recommendations
        recommendations.extend(base_recommendations)
        
        # Remove duplicates and sort by priority
        seen = set()
        unique_recommendations = []
        for rec in recommendations:
            identifier = rec["title"]
            if identifier not in seen:
                seen.add(identifier)
                unique_recommendations.append(rec)
        
        priority_order = {"critical": 0, "high": 1, "medium": 2, "low": 3}
        unique_recommendations.sort(key=lambda x: priority_order[x["priority"]])
        
        return unique_recommendations

    def get_assessment_questions(self) -> Dict:
        """Return all assessment questions"""
        return self.questions_data

    def get_current_threats(self) -> List[Dict]:
        """Return current threat alerts for Nigeria"""
        return self.threat_alerts


// ==== backend/app/services/email_service.py ====
import re
from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)

class EmailService:
    def __init__(self):
        self.email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    
    def validate_email(self, email: str) -> Dict[str, Any]:
        """Validate email format and common Nigerian email providers"""
        if not email:
            return {"valid": False, "message": "Email is required"}
        
        # Basic format validation
        if not re.match(self.email_regex, email):
            return {"valid": False, "message": "Please enter a valid email address"}
        
        # Common Nigerian email providers validation
        nigerian_domains = [
            'gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com',
            'naij.com', 'nigerian.email', 'ymail.com'
        ]
        
        domain = email.split('@')[1].lower()
        if domain not in nigerian_domains:
            logger.info(f"Non-standard email domain used: {domain}")
            # We don't block non-standard domains, just log for awareness
        
        return {"valid": True, "message": "Email is valid"}
    
    def sanitize_email(self, email: str) -> str:
        """Sanitize email input"""
        return email.strip().lower()


// ==== backend/app/services/pdf_service.py ====
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from typing import Dict, List, Any
import os

class PDFReportService:
    def __init__(self):
        self.styles = getSampleStyleSheet()
        
    def create_security_report(self, assessment_data: Dict, recommendations: List[Dict], output_path: str) -> str:
        """Create a PDF security assessment report"""
        
        try:
            doc = SimpleDocTemplate(
                output_path,
                pagesize=letter,
                rightMargin=72,
                leftMargin=72,
                topMargin=72,
                bottomMargin=18
            )
            
            story = []
            
            # Title
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=self.styles['Heading1'],
                fontSize=18,
                spaceAfter=30,
                alignment=1,  # Center aligned
                textColor=colors.HexColor('#1a365d')
            )
            
            story.append(Paragraph("NaijaBiz Shield Security Report", title_style))
            story.append(Spacer(1, 0.2*inch))
            
            # Business Information
            story.append(Paragraph("Business Overview", self.styles['Heading2']))
            business_info = [
                ["Business Name:", assessment_data.get('business_name', 'Not provided')],
                ["Business Type:", assessment_data.get('business_type', 'Not provided')],
                ["Employee Count:", assessment_data.get('employee_count', 'Not provided')]
            ]
            
            business_table = Table(business_info, colWidths=[2*inch, 4*inch])
            business_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f7fafc')),
                ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ]))
            
            story.append(business_table)
            story.append(Spacer(1, 0.3*inch))
            
            # Risk Assessment Results
            risk_level = assessment_data['risk_level']
            risk_score = assessment_data['risk_score']
            
            # Risk level color
            risk_colors = {
                'low': '#48bb78',
                'medium': '#ecc94b', 
                'high': '#ed8936',
                'critical': '#e53e3e'
            }
            
            story.append(Paragraph("Risk Assessment Summary", self.styles['Heading2']))
            risk_info = [
                ["Overall Risk Score:", f"{risk_score:.1f}%"],
                ["Risk Level:", risk_level.upper()],
                ["Questions Answered:", str(assessment_data['total_questions_answered'])]
            ]
            
            risk_table = Table(risk_info, colWidths=[2*inch, 4*inch])
            risk_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f7fafc')),
                ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 11),
                ('BACKGROUND', (1, 1), (1, 1), colors.HexColor(risk_colors.get(risk_level, '#cbd5e0'))),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
            ]))
            
            story.append(risk_table)
            story.append(Spacer(1, 0.3*inch))
            
            # Security Recommendations
            if recommendations:
                story.append(Paragraph("Security Recommendations", self.styles['Heading2']))
                
                for i, rec in enumerate(recommendations, 1):
                    # Priority color
                    priority_colors = {
                        'critical': '#e53e3e',
                        'high': '#ed8936',
                        'medium': '#ecc94b',
                        'low': '#48bb78'
                    }
                    
                    rec_text = f"<b>{i}. {rec['title']}</b> [Priority: {rec['priority'].upper()}]<br/>" \
                              f"{rec['description']}<br/>" \
                              f"<i>Category: {rec['category'].replace('_', ' ').title()}</i>"
                    
                    rec_style = ParagraphStyle(
                        f'RecStyle{i}',
                        parent=self.styles['Normal'],
                        leftIndent=20,
                        spaceAfter=12,
                        borderPadding=5,
                        backgroundColor=colors.HexColor('#f7fafc')
                    )
                    
                    story.append(Paragraph(rec_text, rec_style))
            
            story.append(Spacer(1, 0.3*inch))
            
            # Footer note
            footer_style = ParagraphStyle(
                'Footer',
                parent=self.styles['Normal'],
                fontSize=9,
                textColor=colors.gray,
                alignment=1
            )
            
            story.append(Paragraph(
                "Generated by NaijaBiz Shield - Digital Resilience Platform for Nigerian SMEs", 
                footer_style
            ))
            
            # Build PDF
            doc.build(story)
            return output_path
            
        except Exception as e:
            # If PDF generation fails, create a simple text file as fallback
            print(f"PDF generation failed: {e}")
            fallback_path = output_path.replace('.pdf', '.txt')
            with open(fallback_path, 'w') as f:
                f.write(f"NaijaBiz Shield Security Report\n")
                f.write(f"Assessment ID: {assessment_data.get('business_name', 'N/A')}\n")
                f.write(f"Risk Score: {risk_score}% - {risk_level.upper()} RISK\n")
                f.write(f"\nRecommendations:\n")
                for rec in recommendations:
                    f.write(f"- {rec['title']} ({rec['priority']})\n")
            return fallback_path


// ==== backend/app/main.py ====
from fastapi import FastAPI, Depends, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from contextlib import asynccontextmanager
import os

from app.core.config import settings
from app.api import security_assessment, reports
from app.core.database import engine, Base

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup: Create database tables
    print("Creating database tables...")
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    
    # NEW: Check if we need to add the email column
    try:
        from sqlalchemy import text
        async with engine.connect() as conn:
            # Check if business_email column exists
            result = await conn.execute(text("PRAGMA table_info(security_assessments)"))
            columns = [row[1] for row in result.fetchall()]
            
            if 'business_email' not in columns:
                print("Adding business_email column to security_assessments table...")
                await conn.execute(text("ALTER TABLE security_assessments ADD COLUMN business_email VARCHAR(255)"))
                await conn.commit()
                print("Column added successfully!")
    except Exception as e:
        print(f"Note: Could not check/alter table structure: {e}")
    
    yield
    # Shutdown
    await engine.dispose()

app = FastAPI(
    title="NaijaBiz Shield API",
    description="Digital Resilience Platform for Nigerian SMEs",
    version="1.0.0",
    lifespan=lifespan
)

# Allowed origins
allowed_origins = [
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "https://naijabiz-shield-insp-git-main-quistechs-projects.vercel.app",
        "https://naijabiz-shield-insp.vercel.app",
        "https://naijabiz-shield-insp-ik639jhik-quistechs-projects.vercel.app"
]

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=allowed_origins,  # Add your frontend domains here
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include routers
app.include_router(security_assessment.router, prefix="/api/v1/security", tags=["security"])
app.include_router(reports.router, prefix="/api/v1/reports", tags=["reports"])

@app.get("/")
async def root():
    return {
        "message": "Welcome to NaijaBiz Shield API",
        "version": "1.0.0",
        "docs": "/docs"
    }

@app.get("/health")
async def health_check():
    return {"status": "healthy", "service": "naijabiz-shield"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)



// ==== frontend/app/layout.tsx ====
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'NaijaBiz Shield - Nigerian SME Digital Resilience Platform',
  description: 'Protect your Nigerian business from digital threats with our comprehensive security assessment and tools.',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en"> {/* Remove className="dark" */}
      <body className={inter.className}>
        <div className="min-h-screen">
          {children}
        </div>
      </body>
    </html>
  )
}


// ==== frontend/app/page.tsx ====
'use client'

import Link from 'next/link'
import { Shield, AlertTriangle, FileText, TrendingUp, ArrowRight } from 'lucide-react'

export default function Home() {
  return (
    <div className="min-h-screen bg-gray-900">
      {/* Navigation */}
      <nav className="bg-gray-800 shadow-xl border-b border-gray-700">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <Shield className="h-8 w-8 text-blue-400" />
              <span className="ml-2 text-xl font-bold text-white">NaijaBiz Shield</span>
            </div>
            <div className="flex items-center space-x-6">
              <Link href="/security-assessment" className="nav-link">
                Security Assessment
              </Link>
              <Link href="/threats" className="nav-link">
                Threat Alerts
              </Link>
              <Link 
                href="/security-assessment" 
                className="btn btn-primary"
              >
                Get Started
              </Link>
            </div>
          </div>
        </div>
      </nav>

      {/* Hero Section */}
      <section className="hero-gradient py-20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <h1 className="text-4xl md:text-6xl font-bold text-white mb-6">
              Protect Your Nigerian Business from 
              <span className="text-blue-400"> Digital Threats</span>
            </h1>
            <p className="text-xl text-gray-300 mb-8 max-w-3xl mx-auto">
              NaijaBiz Shield helps Nigerian SMEs identify security risks, get personalized recommendations, 
              and build resilience against cyber attacks tailored to our local context.
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Link 
                href="/security-assessment" 
                className="btn btn-primary text-lg px-8 py-3 flex items-center justify-center"
              >
                Start Security Assessment
                <ArrowRight className="ml-2 h-5 w-5" />
              </Link>
              <Link 
                href="/threats" 
                className="btn btn-secondary text-lg px-8 py-3"
              >
                View Current Threats
              </Link>
            </div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-16 bg-gray-800">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-white mb-4">
              How NaijaBiz Shield Protects Your Business
            </h2>
            <p className="text-lg text-gray-300 max-w-2xl mx-auto">
              Our platform is specifically designed for Nigerian SMEs facing unique digital challenges.
            </p>
          </div>

          <div className="grid md:grid-cols-3 gap-8">
            <div className="card text-center hover:border-blue-500 transition-colors duration-200">
              <div className="w-12 h-12 bg-blue-900 rounded-lg flex items-center justify-center mx-auto mb-4">
                <FileText className="h-6 w-6 text-blue-400" />
              </div>
              <h3 className="text-xl font-semibold text-white mb-2">Security Assessment</h3>
              <p className="text-gray-300">
                Complete a 10-minute assessment to identify your business's specific security vulnerabilities.
              </p>
            </div>

            <div className="card text-center hover:border-orange-500 transition-colors duration-200">
              <div className="w-12 h-12 bg-orange-900 rounded-lg flex items-center justify-center mx-auto mb-4">
                <AlertTriangle className="h-6 w-6 text-orange-400" />
              </div>
              <h3 className="text-xl font-semibold text-white mb-2">Threat Intelligence</h3>
              <p className="text-gray-300">
                Stay updated on the latest digital threats targeting Nigerian businesses.
              </p>
            </div>

            <div className="card text-center hover:border-green-500 transition-colors duration-200">
              <div className="w-12 h-12 bg-green-900 rounded-lg flex items-center justify-center mx-auto mb-4">
                <TrendingUp className="h-6 w-6 text-green-400" />
              </div>
              <h3 className="text-xl font-semibold text-white mb-2">Actionable Insights</h3>
              <p className="text-gray-300">
                Get personalized recommendations and step-by-step guidance to improve your security.
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-16 bg-gray-900 border-t border-gray-800">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <h2 className="text-3xl font-bold text-white mb-4">
            Ready to Secure Your Business?
          </h2>
          <p className="text-xl text-gray-300 mb-8 max-w-2xl mx-auto">
            Join hundreds of Nigerian SMEs who have already protected their businesses with our free assessment.
          </p>
          <Link 
            href="/security-assessment" 
            className="btn btn-primary text-lg px-8 py-3 inline-block"
          >
            Start Free Assessment
          </Link>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-gray-800 border-t border-gray-700 py-8">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <div className="flex items-center mb-4 md:mb-0">
              <Shield className="h-6 w-6 text-blue-400" />
              <span className="ml-2 text-lg font-semibold text-white">NaijaBiz Shield</span>
            </div>
            <div className="text-gray-400">
              &copy; 2024 InspireNova Enterprises. Built for Nigerian SMEs.
            </div>
          </div>
        </div>
      </footer>
    </div>
  )
}


// ==== frontend/app/globals.css ====
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html {
    scroll-behavior: smooth;
  }
  
  body {
    @apply bg-[#111e2f] text-gray-100;
  }
}

@layer components {
  .btn {
    @apply px-6 py-3 rounded-lg font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-[#111e2f];
  }
  
  .btn-primary {
    @apply bg-[#d74622] text-white hover:bg-[#c13a18] focus:ring-[#d74622] shadow-lg;
  }
  
  .btn-secondary {
    @apply bg-[#1a2d44] text-gray-100 hover:bg-[#223553] focus:ring-[#2d3748] border border-[#2d3748];
  }
  
  .btn-outline {
    @apply border-2 border-[#d74622] text-[#d74622] hover:bg-[#d74622] hover:text-white focus:ring-[#d74622];
  }
  
  .card {
    @apply bg-[#1a2d44] rounded-xl shadow-xl border border-[#2d3748] p-6 backdrop-blur-sm;
  }
  
  .nav-link {
    @apply text-gray-300 hover:text-white transition-colors duration-200;
  }

  .hero-gradient {
    background: linear-gradient(135deg, #dd020f 0%, #76127f 50%, #0c22f1 100%);
  }

  .risk-badge {
    @apply px-3 py-1 rounded-full text-sm font-medium;
  }
  
  .risk-low {
    @apply bg-green-900 text-green-300;
  }
  
  .risk-medium {
    @apply bg-yellow-900 text-yellow-300;
  }
  
  .risk-high {
    @apply bg-orange-900 text-orange-300;
  }
  
  .risk-critical {
    @apply bg-red-900 text-red-300;
  }
}

/* Your custom brand colors */
.bg-brand-primary { background-color: #d74622; }
.text-brand-primary { color: #d74622; }
.border-brand-primary { border-color: #d74622; }

.bg-brand-secondary { background-color: #76127f; }
.text-brand-secondary { color: #76127f; }

.bg-brand-accent { background-color: #0c22f1; }
.text-brand-accent { color: #0c22f1; }


// ==== frontend/components/assessment/AssessmentForm.tsx ====
'use client';

import { useState } from 'react';
import { AssessmentSection, AssessmentAnswers } from '@/types/assessment';
import { QuestionStep } from './QuestionStep';
import { BusinessInfoStep } from './BusinessInfoStep';

interface AssessmentFormProps {
  sections: AssessmentSection[];
  onSubmit: (businessName: string, businessEmail: string, answers: AssessmentAnswers) => void; // UPDATED
  loading: boolean;
}

export const AssessmentForm: React.FC<AssessmentFormProps> = ({ 
  sections, 
  onSubmit, 
  loading 
}) => {
  const [currentStep, setCurrentStep] = useState(0);
  const [businessName, setBusinessName] = useState('');
  const [businessEmail, setBusinessEmail] = useState(''); // NEW: Email state
  const [answers, setAnswers] = useState<AssessmentAnswers>({});
  const [showBusinessInfo, setShowBusinessInfo] = useState(true);

  const allQuestions = sections.flatMap(section => section.questions);
  const totalSteps = allQuestions.length + 1;

  // UPDATED: Accept both name and email
  const handleBusinessInfoSubmit = (name: string, email: string) => {
    setBusinessName(name);
    setBusinessEmail(email);
    setShowBusinessInfo(false);
    setCurrentStep(1);
  };

  const handleAnswer = (questionId: string, answer: string) => {
    setAnswers(prev => ({ ...prev, [questionId]: answer }));
  };

  const handleNext = () => {
    if (currentStep < totalSteps - 1) {
      setCurrentStep(prev => prev + 1);
    } else {
      // UPDATED: Pass email to onSubmit
      onSubmit(businessName, businessEmail, answers);
    }
  };

  const handleBack = () => {
    if (currentStep === 1) {
      setShowBusinessInfo(true);
      setCurrentStep(0);
    } else if (currentStep > 1) {
      setCurrentStep(prev => prev - 1);
    }
  };

  const progress = ((currentStep) / (totalSteps - 1)) * 100;

  if (showBusinessInfo) {
    return (
      <BusinessInfoStep
        onSubmit={handleBusinessInfoSubmit}
        onCancel={() => window.history.back()}
      />
    );
  }

  const currentQuestion = allQuestions[currentStep - 1];
  const currentSection = sections.find(section => 
    section.questions.includes(currentQuestion)
  );

  return (
    <div className="max-w-4xl mx-auto">
      {/* Progress Bar */}
      <div className="mb-8">
        <div className="flex justify-between text-sm text-white mb-2">
          <span>Progress</span>
          <span>{currentStep} of {totalSteps - 1}</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2">
          <div 
            className="bg-gradient-to-r from-[#dd020f] via-[#76127f] to-[#0c22f1] h-2 rounded-full transition-all duration-300"
            style={{ width: `${progress}%` }}
          ></div>
        </div>
      </div>

      {/* Question */}
      <QuestionStep
        section={currentSection!}
        question={currentQuestion}
        answer={answers[currentQuestion.id] || ''}
        onAnswer={handleAnswer}
        onNext={handleNext}
        onBack={handleBack}
        isLast={currentStep === totalSteps - 1}
        loading={loading}
        currentStep={currentStep - 1}
        totalSteps={totalSteps - 1}
      />
    </div>
  );
};


// ==== frontend/components/assessment/AssessmentResults.tsx ====
'use client';

import { AssessmentResult, SecurityRecommendation } from '@/types/assessment';
import { Download, Shield, AlertTriangle, CheckCircle, ArrowLeft } from 'lucide-react';

interface AssessmentResultsProps {
  result: AssessmentResult;
  onDownloadReport: (assessmentId: number) => void;
  onRestart: () => void;
  downloadLoading: boolean;
}

export const AssessmentResults: React.FC<AssessmentResultsProps> = ({
  result,
  onDownloadReport,
  onRestart,
  downloadLoading
}) => {
  const { risk_assessment, recommendations, threat_alerts, assessment_id } = result;

  const getRiskColor = (level: string) => {
    switch (level) {
      case 'low': return 'risk-low';
      case 'medium': return 'risk-medium';
      case 'high': return 'risk-high';
      case 'critical': return 'risk-critical';
      default: return 'risk-medium';
    }
  };

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case 'critical':
      case 'high':
        return <AlertTriangle className="h-5 w-5 text-red-500" />;
      case 'medium':
        return <AlertTriangle className="h-5 w-5 text-yellow-500" />;
      case 'low':
        return <CheckCircle className="h-5 w-5 text-green-500" />;
      default:
        return <Shield className="h-5 w-5 text-blue-500" />;
    }
  };

  return (
    <div className="max-w-6xl mx-auto space-y-8">
      {/* Risk Summary */}
<div className="card text-center">
  <div className="w-20 h-20 mx-auto mb-6 rounded-full flex items-center justify-center bg-gradient-to-br from-[#dd020f] via-[#76127f] to-[#0c22f1]">
    <Shield className="h-10 w-10 text-white" />
  </div>
  
  <h2 className="text-3xl font-bold text-white mb-4">
    Security Assessment Complete
  </h2>

  {risk_assessment && (
    <>
      <div className="inline-block">
        <span className={`risk-badge ${getRiskColor(risk_assessment.risk_level)} text-lg px-6 py-2`}>
          {risk_assessment.risk_level.toUpperCase()} RISK
        </span>
      </div>

      <p className="text-gray-300 mt-4">
        Your business security score: <strong>{risk_assessment.risk_score.toFixed(1)}%</strong>
      </p>
      <p className="text-sm text-gray-500">
        {risk_assessment.total_questions_answered} questions analyzed
      </p>
    </>
  )}
</div>


      <div className="grid lg:grid-cols-2 gap-8">
        {/* Recommendations */}
        <div className="card">
          <h3 className="text-xl font-semibold text-white mb-6 flex items-center">
            <Shield className="h-6 w-6 text-[#d74622] mr-2" />
            Security Recommendations
          </h3>
          
          <div className="space-y-4">
            {recommendations.map((rec, index) => (
              <div key={index} className="p-4 rounded-lg border border-gray-600 hover:shadow-md transition-shadow">
                <div className="flex items-start gap-3">
                  {getPriorityIcon(rec.priority)}
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <h4 className="font-semibold text-white">{rec.title}</h4>
                      <span className={`risk-badge ${getRiskColor(rec.priority)} text-xs`}>
                        {rec.priority}
                      </span>
                    </div>
                    <p className="text-gray-300 text-sm">{rec.description}</p>
                    <div className="mt-2">
                      <span className="text-xs text-gray-500 capitalize">
                        {rec.category.replace('_', ' ')}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Threat Alerts & Actions */}
        <div className="space-y-6">
          {/* Threat Alerts */}
          {threat_alerts.length > 0 && (
            <div className="card">
              <h3 className="text-xl font-semibold text-white mb-4 flex items-center">
                <AlertTriangle className="h-6 w-6 text-orange-500 mr-2" />
                Current Threat Alerts
              </h3>
              
              <div className="space-y-3">
                {threat_alerts.map((alert, index) => (
                  <div key={index} className="p-3 bg-orange-50 border border-orange-200 rounded-lg">
                    <h4 className="font-semibold text-orange-800 text-sm">{alert.title}</h4>
                    <p className="text-orange-700 text-xs mt-1">{alert.description}</p>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Actions */}
          <div className="card">
            <h3 className="text-xl font-semibold text-white mb-4">
              Next Steps
            </h3>
            
            <div className="space-y-4">
              <button
                onClick={() => onDownloadReport(assessment_id)}
                disabled={downloadLoading}
                className="w-full btn-primary flex items-center justify-center"
              >
                {downloadLoading ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Generating Report...
                  </>
                ) : (
                  <>
                    <Download className="h-5 w-5 mr-2" />
                    Download PDF Report
                  </>
                )}
              </button>
              
              <button
                onClick={onRestart}
                className="w-full btn-outline-dark"
              >
                <ArrowLeft className="h-5 w-5 mr-2" />
                Start New Assessment
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};


// ==== frontend/components/assessment/BusinessInfoStep.tsx ====
'use client';

import { useState } from 'react';
import { Building2, ArrowRight } from 'lucide-react';

interface BusinessInfoStepProps {
  onSubmit: (businessName: string, businessEmail: string) => void;
  onCancel: () => void;
}

export const BusinessInfoStep: React.FC<BusinessInfoStepProps> = ({
  onSubmit,
  onCancel
}) => {
  const [businessName, setBusinessName] = useState('');
  const [businessEmail, setBusinessEmail] = useState('');
  const [errors, setErrors] = useState<{ name?: string; email?: string }>({});

  const validateForm = () => {
    const newErrors: { name?: string; email?: string } = {};

    if (!businessName.trim()) {
      newErrors.name = 'Business name is required';
    }

    if (!businessEmail.trim()) {
      newErrors.email = 'Email is required';
    } else if (!isValidEmail(businessEmail)) {
      newErrors.email = 'Please enter a valid email address';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const isValidEmail = (email: string) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (validateForm()) {
      onSubmit(businessName.trim(), businessEmail.trim());
    }
  };

  return (
    <div className="max-w-2xl mx-auto">
      <div className="card">
        <div className="text-center mb-8">
          <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-gradient-to-br from-[#dd020f] via-[#76127f] to-[#0c22f1] flex items-center justify-center">
            <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <h1 className="text-3xl font-bold text-white mb-2">
            Tell us about your business
          </h1>
          <p className="text-gray-300 text-lg">
            Let's start with your business details. This helps us personalize your security assessment.
          </p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Business Name Field */}
          <div>
            <label htmlFor="businessName" className="block text-sm font-medium text-white mb-2">
              Business Name *
            </label>
            <input
              type="text"
              id="businessName"
              value={businessName}
              onChange={(e) => setBusinessName(e.target.value)}
              placeholder="Enter your business name"
              className={`w-full px-4 py-3 bg-gray-700 border rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:border-transparent ${
                errors.name ? 'border-red-500 focus:ring-red-500' : 'border-gray-600 focus:ring-[#d74622]'
              }`}
            />
            {errors.name && (
              <p className="mt-1 text-sm text-red-400">{errors.name}</p>
            )}
          </div>

          {/* Business Email Field */}
          <div>
            <label htmlFor="businessEmail" className="block text-sm font-medium text-white mb-2">
              Business Email *
            </label>
            <input
              type="email"
              id="businessEmail"
              value={businessEmail}
              onChange={(e) => setBusinessEmail(e.target.value)}
              placeholder="Enter your business email"
              className={`w-full px-4 py-3 bg-gray-700 border rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:border-transparent ${
                errors.email ? 'border-red-500 focus:ring-red-500' : 'border-gray-600 focus:ring-[#d74622]'
              }`}
            />
            {errors.email && (
              <p className="mt-1 text-sm text-red-400">{errors.email}</p>
            )}
            <p className="mt-1 text-sm text-gray-400">
              We'll send your security assessment report to this email
            </p>
          </div>

          {/* Action Buttons */}
          <div className="flex gap-4 pt-4">
            <button
              type="button"
              onClick={onCancel}
              className="flex-1 btn btn-secondary"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="flex-1 btn btn-primary"
            >
              Start Assessment
            </button>
          </div>

          {/* Privacy Notice */}
          <div className="text-center pt-4 border-t border-gray-600">
            <p className="text-xs text-gray-400">
              We respect your privacy. Your email and business information will be kept confidential 
              and used only to deliver your security assessment report.
            </p>
          </div>
        </form>
      </div>
    </div>
  );
};


// ==== frontend/components/assessment/EmailCollectionStep.tsx ====
'use client';

import { useState } from 'react';
import { Mail, ArrowRight, ArrowLeft, Shield } from 'lucide-react';

interface EmailCollectionStepProps {
  onSubmit: (email: string) => void;
  onBack: () => void;
  loading?: boolean;
}

export const EmailCollectionStep: React.FC<EmailCollectionStepProps> = ({ 
  onSubmit, 
  onBack,
  loading = false
}) => {
  const [email, setEmail] = useState('');
  const [validationError, setValidationError] = useState('');
  const [isValidating, setIsValidating] = useState(false);

  const validateEmail = async (email: string) => {
    if (!email.trim()) {
      setValidationError('Email is required');
      return false;
    }

    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      setValidationError('Please enter a valid email address');
      return false;
    }

    // API validation for additional checks
    try {
      setIsValidating(true);
      const response = await fetch('/api/v1/security/validate-email', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email }),
      });

      const result = await response.json();
      
      if (!result.success) {
        setValidationError(result.message);
        return false;
      }

      setValidationError('');
      return true;
    } catch (error) {
      console.error('Email validation error:', error);
      // If validation API fails, proceed with basic validation
      setValidationError('');
      return true;
    } finally {
      setIsValidating(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const isValid = await validateEmail(email);
    if (isValid) {
      onSubmit(email);
    }
  };

  const handleEmailChange = (value: string) => {
    setEmail(value);
    // Clear validation error when user starts typing
    if (validationError) {
      setValidationError('');
    }
  };

  return (
    <div className="max-w-2xl mx-auto">
      <div className="card">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="w-16 h-16 bg-[#d74622]/10 rounded-full flex items-center justify-center mx-auto mb-4">
            <Mail className="h-8 w-8 text-[#d74622]" />
          </div>
          
          <h2 className="text-2xl font-bold text-white mb-4">
            Almost Done! Get Your Security Report
          </h2>
          
          <p className="text-gray-300 mb-2">
            Enter your email to receive your detailed security assessment report
          </p>
          <p className="text-sm text-gray-400">
            We'll send your personalized recommendations and threat analysis
          </p>
        </div>

        {/* Benefits */}
        <div className="bg-[#1a2d44] border border-[#2d3748] rounded-lg p-4 mb-6">
          <h3 className="font-semibold text-white mb-3 flex items-center">
            <Shield className="h-4 w-4 text-[#d74622] mr-2" />
            What you'll receive:
          </h3>
          <ul className="text-sm text-gray-300 space-y-2">
            <li className="flex items-center">
              <div className="w-1.5 h-1.5 bg-[#d74622] rounded-full mr-2"></div>
              Complete PDF security report
            </li>
            <li className="flex items-center">
              <div className="w-1.5 h-1.5 bg-[#d74622] rounded-full mr-2"></div>
              Personalized recommendations
            </li>
            <li className="flex items-center">
              <div className="w-1.5 h-1.5 bg-[#d74622] rounded-full mr-2"></div>
              Current threat alerts for Nigerian businesses
            </li>
            <li className="flex items-center">
              <div className="w-1.5 h-1.5 bg-[#d74622] rounded-full mr-2"></div>
              Priority action steps
            </li>
          </ul>
        </div>

        {/* Email Form */}
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-300 text-left mb-2">
              Email Address *
            </label>
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e) => handleEmailChange(e.target.value)}
              placeholder="Enter your business email"
              className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-[#d74622] focus:border-transparent ${
                validationError 
                  ? 'border-red-500 bg-red-500/5' 
                  : 'border-gray-600'
              }`}
              required
              disabled={loading || isValidating}
            />
            {validationError && (
              <p className="text-red-400 text-sm mt-2 flex items-center">
                <span className="w-1.5 h-1.5 bg-red-400 rounded-full mr-2"></span>
                {validationError}
              </p>
            )}
          </div>

          {/* Privacy Notice */}
          <div className="text-xs text-gray-400 text-center">
            <p>
              We respect your privacy. Your email will only be used to send your security report 
              and important updates. No spam, unsubscribe anytime.
            </p>
          </div>

          {/* Navigation */}
          <div className="flex gap-4 pt-4">
            <button
              type="button"
              onClick={onBack}
              disabled={loading || isValidating}
              className="btn-secondary flex-1 flex items-center justify-center"
            >
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Questions
            </button>
            
            <button
              type="submit"
              disabled={!email.trim() || loading || isValidating}
              className="btn-primary flex-1 flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading || isValidating ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  {isValidating ? 'Validating...' : 'Processing...'}
                </>
              ) : (
                <>
                  Get My Report
                  <ArrowRight className="ml-2 h-4 w-4" />
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};


// ==== frontend/components/assessment/QuestionStep.tsx ====
'use client';

import { AssessmentSection, AssessmentQuestion } from '@/types/assessment';
import { ArrowLeft, ArrowRight, Shield } from 'lucide-react';

interface QuestionStepProps {
  section: AssessmentSection;
  question: AssessmentQuestion;
  answer: string;
  onAnswer: (questionId: string, answer: string) => void;
  onNext: () => void;
  onBack: () => void;
  isLast: boolean;
  loading: boolean;
  currentStep: number;
  totalSteps: number;
}

export const QuestionStep: React.FC<QuestionStepProps> = ({
  section,
  question,
  answer,
  onAnswer,
  onNext,
  onBack,
  isLast,
  loading,
  currentStep,
  totalSteps
}) => {
  const handleOptionSelect = (value: string) => {
    onAnswer(question.id, value);
  };

  const handleNext = () => {
    if (answer && !loading) {
      onNext();
    }
  };

  const canProceed = answer && !loading;

  return (
    <div className="card">
      {/* Section Header */}
      <div className="mb-6">
        <div className="flex items-center gap-2 text-sm text-[#d74622] font-medium mb-2">
          <Shield className="h-4 w-4" />
          <span>{section.title}</span>
        </div>
        <div className="text-xs text-gray-400">
          Question {currentStep + 1} of {totalSteps}
        </div>
      </div>

      {/* Question */}
      <h3 className="text-xl font-semibold text-white mb-8">
        {question.question}
      </h3>

      {/* Options */}
      <div className="space-y-3 mb-8">
        {question.type === 'radio' && question.options?.map((option) => (
          <button
            key={option.value}
            onClick={() => handleOptionSelect(option.value)}
            className={`w-full text-left p-4 rounded-lg border-2 transition-all duration-200 ${
              answer === option.value
                ? 'border-[#d74622] bg-[#d74622]/5 text-[#d74622]'
                : 'border-gray-600 hover:border-gray-500 hover:bg-gray-700'
            }`}
          >
            <div className="flex items-center justify-between">
              <span className="font-medium">{option.label}</span>
              {answer === option.value && (
                <div className="w-6 h-6 bg-[#d74622] rounded-full flex items-center justify-center">
                  <div className="w-2 h-2  rounded-full"></div>
                </div>
              )}
            </div>
          </button>
        ))}

        {question.type === 'select' && question.options?.map((option) => (
          <button
            key={option.value}
            onClick={() => handleOptionSelect(option.value)}
            className={`w-full text-left p-4 rounded-lg border-2 transition-all duration-200 ${
              answer === option.value
                ? 'border-[#d74622] bg-[#d74622]/5 text-[#d74622]'
                : 'border-gray-600 hover:border-gray-500 hover:bg-gray-700'
            }`}
          >
            <span className="font-medium">{option.label}</span>
          </button>
        ))}

        {question.type === 'text' && (
          <textarea
            value={answer}
            onChange={(e) => handleOptionSelect(e.target.value)}
            placeholder="Type your answer here..."
            className="w-full px-4 py-3 border border-gray-600 rounded-lg focus:ring-2 focus:ring-[#d74622] focus:border-transparent resize-none"
            rows={4}
          />
        )}
      </div>

      {/* Navigation */}
      <div className="flex justify-between items-center pt-6 border-t border-gray-600">
        <button
          onClick={onBack}
          className="btn-secondary flex items-center"
          disabled={loading}
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back
        </button>

        <button
          onClick={handleNext}
          disabled={!canProceed}
          className="btn-primary flex items-center disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {loading ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              Processing...
            </>
          ) : (
            <>
              {isLast ? 'Get Results' : 'Next Question'}
              <ArrowRight className="ml-2 h-4 w-4" />
            </>
          )}
        </button>
      </div>
    </div>
  );
};


